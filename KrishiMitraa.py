import streamlit as st
from datetime import datetime
import base64

# Import profit prediction dashboard
try:
    from profit_prediction_dashboard import integrate_profit_dashboard
    PROFIT_DASHBOARD_AVAILABLE = True
except ImportError:
    PROFIT_DASHBOARD_AVAILABLE = False

# ------------------ Language Data ------------------
LANGUAGE_DATA = {
    "English": {
        "welcome": "ЁЯМ╛ Welcome to KrishiMitra!",
        "fertilizer": "ЁЯМ▒ Fertilizer Recommendation",
        "loan": "ЁЯПж Loan/Subsidy Checker",
        "weather_alert": "ЁЯМжя╕П Weather Alerts",
        "crop_calendar": "ЁЯУЕ Crop Calendar",
        "profit_prediction": "ЁЯУК Profit Prediction"
    },
    "Hindi": {
        "welcome": "ЁЯМ╛ рдХреГрд╖рд┐ рдорд┐рддреНрд░ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!",
        "fertilizer": "ЁЯМ▒ рдЙрд░реНрд╡рд░рдХ рд╕рд┐рдлрд╛рд░рд┐рд╢",
        "loan": "ЁЯПж рдЛрдг/рд╕рдмреНрд╕рд┐рдбреА рдЬрд╛рдВрдЪ",
        "weather_alert": "ЁЯМжя╕П рдореМрд╕рдо рдЕрд▓рд░реНрдЯ",
        "crop_calendar": "ЁЯУЕ рдлрд╕рд▓ рдХреИрд▓реЗрдВрдбрд░",
        "profit_prediction": "ЁЯУК рд▓рд╛рдн рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди"
    },
    "Bhojpuri": {
        "welcome": "ЁЯМ╛ рдХреГрд╖рд┐рдорд┐рддреНрд░ рдореЗрдВ рд░рдЙрдЖ рд╕реНрд╡рд╛рдЧрдд рдмрд╛!",
        "fertilizer": "ЁЯМ▒ рдЦрд╛рдж рд╕рд┐рдлрд╛рд░рд┐рд╢",
        "loan": "ЁЯПж рдХрд░реНрдЬ/рд╕рдмреНрд╕рд┐рдбреА рдЬрд╛рдВрдЪ",
        "weather_alert": "ЁЯМжя╕П рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА",
        "crop_calendar": "ЁЯУЕ рдлрд╕рд▓ рдХреИрд▓реЗрдВрдбрд░",
        "profit_prediction": "ЁЯУК рд▓рд╛рдн рдЕрдиреБрдорд╛рди"
    },
    "Punjabi": {
        "welcome": "ЁЯМ╛ риХрйНри░ри┐ри╕ри╝рйА риори┐ридри░ ри╡ри┐рй▒риЪ ридрйБри╣ри╛рибри╛ ри╕рйБриЖриЧрид ри╣рйИ!",
        "fertilizer": "ЁЯМ▒ риЦри╛риж ри╕ри┐рилри╛ри░ри╕ри╝",
        "loan": "ЁЯПж риХри░риЬри╝ри╛ риЬри╛риВ ри╕римри╕ри┐рибрйА риЪрйИрй▒риХри░",
        "weather_alert": "ЁЯМжя╕П риорйМри╕рио риЪрйЗридри╛ри╡риирйА",
        "crop_calendar": "ЁЯУЕ рилри╕ри▓ риХрйИри▓рй░рибри░",
        "profit_prediction": "ЁЯУК ри▓ри╛рин рикрйВри░ри╡ риЕриирйБриори╛рии"
    },
    "Tamil": {
        "welcome": "ЁЯМ╛ роХро┐ро░рпБро╖ро┐рооро┐родрпНро░ро╛ро╡ро┐ро▒рпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!",
        "fertilizer": "ЁЯМ▒ роЙро░ рокро░ро┐роирпНродрпБро░рпИ",
        "loan": "ЁЯПж роХроЯройрпН/родрпКроХрпИ роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ",
        "weather_alert": "ЁЯМжя╕П ро╡ро╛ройро┐ро▓рпИ роОроЪрпНроЪро░ро┐роХрпНроХрпИ",
        "crop_calendar": "ЁЯУЕ рокропро┐ро░рпН роиро╛роЯрпНроХро╛роЯрпНроЯро┐",
        "profit_prediction": "ЁЯУК ро▓ро╛рок роХрогро┐рокрпНрокрпБ"
    },
    "Telugu": {
        "welcome": "ЁЯМ╛ р░Хр▒Гр░╖р░┐р░ор░┐р░др▒Нр░░р░╛ р░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В!",
        "fertilizer": "ЁЯМ▒ р░Ор░░р▒Бр░╡р▒Б р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б",
        "loan": "ЁЯПж р░░р▒Бр░гр░В/р░╕р░мр▒Нр░╕р░┐р░бр▒А р░др░ир░┐р░Цр▒А",
        "weather_alert": "ЁЯМжя╕П р░╡р░╛р░др░╛р░╡р░░р░г р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б",
        "crop_calendar": "ЁЯУЕ р░кр░Вр░Я р░Хр▒Нр░пр░╛р░▓р▒Жр░Вр░бр░░р▒Н",
        "profit_prediction": "ЁЯУК р░▓р░╛р░н р░Ер░Вр░Ър░ир░╛"
    },
    "Kannada": {
        "welcome": "ЁЯМ╛ р▓Хр│Гр▓╖р▓┐ р▓ор▓┐р▓др│Нр▓░р▓Хр│Нр▓Хр│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д!",
        "fertilizer": "ЁЯМ▒ р▓░р▓╕р▓Чр│Кр▓мр│Нр▓мр▓░ р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б",
        "loan": "ЁЯПж р▓╕р▓╛р▓▓/р▓╕р▓мр│Нр▓╕р▓┐р▓бр▓┐ р▓др▓кр▓╛р▓╕р▓гр│Ж",
        "weather_alert": "ЁЯМжя╕П р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Ж",
        "crop_calendar": "ЁЯУЕ р▓мр│Жр▓│р│Ж р▓жр▓┐р▓ир▓жр▓░р│Нр▓╢р▓┐",
        "profit_prediction": "ЁЯУК р▓▓р▓╛р▓н р▓ор│Бр▓ир│Нр▓╕р│Вр▓Ър▓ир│Ж"
    },
    "Awadhi": {
        "welcome": "ЁЯМ╛ рдХреГрд╖рд┐рдорд┐рддреНрд░ рдорд╛ рддреЛрд╣рд╛рд░ рд╕реНрд╡рд╛рдЧрдд рдмрд╛!",
        "fertilizer": "ЁЯМ▒ рдЦрд╛рдж рд╕рд┐рдлрд╛рд░рд┐рд╢",
        "loan": "ЁЯПж рдХрд░реНрдЬ/рд╕рдмреНрд╕рд┐рдбреА рдЬрд╛рдВрдЪ",
        "weather_alert": "ЁЯМжя╕П рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА",
        "crop_calendar": "ЁЯУЕ рдлрд╕рд▓ рдХреИрд▓реЗрдВрдбрд░",
        "profit_prediction": "ЁЯУК рд▓рд╛рдн рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди"
    }
    # Add other languages here as needed
}

# Place this right after your imports and before any UI code
def set_bg_from_url(image_url):
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("{image_url}");
            background-size: cover;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

# Example usage:
set_bg_from_url("https://ibb.co/n4w8k5F.jpg")

# ------------------ Sidebar for Language ------------------
st.sidebar.title("ЁЯМР Select Language")
language = st.sidebar.selectbox("Choose your preferred language:", list(LANGUAGE_DATA.keys()))
lang_content = LANGUAGE_DATA[language]

# Store language in session state for profit dashboard
st.session_state.language = language

# ------------------ Main UI ------------------
st.title(lang_content["welcome"])

# ------------------ Navigation ------------------
st.markdown("---")
nav_col1, nav_col2, nav_col3, nav_col4, nav_col5 = st.columns(5)

with nav_col1:
    if st.button("ЁЯПа Home", use_container_width=True):
        st.session_state.page = "home"

with nav_col2:
    if st.button(lang_content["fertilizer"], use_container_width=True):
        st.session_state.page = "fertilizer"

with nav_col3:
    if st.button(lang_content["loan"], use_container_width=True):
        st.session_state.page = "loan"

with nav_col4:
    if st.button(lang_content["weather_alert"], use_container_width=True):
        st.session_state.page = "weather"

with nav_col5:
    if PROFIT_DASHBOARD_AVAILABLE and st.button(lang_content["profit_prediction"], use_container_width=True):
        st.session_state.page = "profit_prediction"

st.markdown("---")

# Initialize page state
if 'page' not in st.session_state:
    st.session_state.page = "home"

# Page routing
if st.session_state.page == "profit_prediction" and PROFIT_DASHBOARD_AVAILABLE:
    integrate_profit_dashboard()
    st.stop()  # Stop executing the rest of the main page

# Show main content only if on home page or other specific pages
if st.session_state.page in ["home", "fertilizer", "loan", "weather"]:
    
    # ------------------ Fertilizer Recommendation ------------------
    st.header(lang_content["fertilizer"])
    fertilizer_info = {
        "Wheat": {
            "Black": "Apply 120 kg N, 60 kg PтВВOтВЕ, 40 kg KтВВO per hectare. Use Urea, DAP, and MOP.",
            "Red": "Apply 100 kg N, 50 kg PтВВOтВЕ, 30 kg KтВВO per hectare. Add 5 tonnes FYM before sowing.",
            "Sandy": "Use 90 kg N, 45 kg PтВВOтВЕ, and 25 kg KтВВO. Split N into 2тАУ3 doses.",
            "Brown": "Apply 110 kg N, 55 kg PтВВOтВЕ, 35 kg KтВВO per hectare. Include organic manure."
        },
        "Rice": {
            "Black": "Apply 100 kg N, 50 kg PтВВOтВЕ, 50 kg KтВВO per hectare. Use split application for N.",
            "Red": "Use 90 kg N, 40 kg PтВВOтВЕ, and 40 kg KтВВO. Add zinc sulphate @ 25 kg/ha.",
            "Sandy": "Apply 80 kg N, 30 kg PтВВOтВЕ, and 30 kg KтВВO. Water management is essential.",
            "Brown": "Use 90:45:45 NPK with green manure incorporation before transplanting."
        },
        "Maize": {
            "Black": "Apply 120 kg N, 60 kg PтВВOтВЕ, 40 kg KтВВO. Use basal + top dressing method.",
            "Red": "Use 100:50:30 NPK with 5 tonnes FYM. Zinc and Boron may be needed.",
            "Sandy": "Apply 80 kg N, 40 kg PтВВOтВЕ, 20 kg KтВВO. Split nitrogen application in 3 stages.",
            "Brown": "100 kg N, 50 kg PтВВOтВЕ, 30 kg KтВВO per hectare. Use organic compost pre-sowing."
        },
        "Potato": {
            "Black": "150:80:120 NPK kg/ha. Apply FYM @ 25 tons/ha before sowing.",
            "Red": "120:60:100 NPK + 2 tonnes of compost. Potassium is critical for tuber growth.",
            "Sandy": "100:40:80 NPK. Add micronutrients like Boron if deficiency appears.",
            "Brown": "130:70:110 NPK. Ensure deep ploughing and ridge formation."
        },
        "Sugarcane": {
            "Black": "Apply 250:115:115 NPK. Apply in 3 split doses with organic matter.",
            "Red": "Use 225:100:100 NPK with 10 tonnes FYM. Micronutrients essential.",
            "Sandy": "200:90:90 NPK. Add press mud or compost for better results.",
            "Brown": "240:110:110 NPK + green manure or biofertilizer for soil enrichment."
        },
        "Tomato": {
            "Black": "100:60:60 NPK per ha. Add 10тАУ15 tonnes FYM. Split nitrogen.",
            "Red": "80:40:50 NPK + Boron and Magnesium. Add neem cake for pest resistance.",
            "Sandy": "70:35:45 NPK. Frequent irrigation needed.",
            "Brown": "90:50:50 NPK + Trichoderma enriched compost for disease control."
        },
        "Mustard": {
            "Black": "80:40:30 NPK + 5 kg Zinc Sulphate. Ideal for higher oil yield.",
            "Red": "70:35:25 NPK. Sulphur application helps oil quality.",
            "Sandy": "60:30:20 NPK. Add FYM and maintain moisture.",
            "Brown": "75:40:25 NPK. Use neem-coated urea."
        }
    }
    crop = st.selectbox("Select Crop", list(fertilizer_info.keys()))
    soil = st.selectbox("Soil Type", list(fertilizer_info[crop].keys()))
    if st.button("Get Recommendation"):
        st.success(fertilizer_info[crop][soil])

    # ------------------ Loan/Subsidy Info ------------------
    st.header(lang_content["loan"])
    age = st.number_input("Enter your age", min_value=18, max_value=80)
    holding = st.selectbox("Land holding (acres)", ["<1", "1-5", ">5"])

    if st.button("Check Eligibility"):
        schemes = []

        # Age-based
        if age < 40:
            schemes.append("Kisan Credit Card (KCC)")
            schemes.append("PM-KISAN")
            schemes.append("Youth Agri Loan (NABARD)")
        elif age >= 60:
            schemes.append("Senior Farmer Pension Scheme")

        # Landholding-based
        if holding == "<1":
            schemes.extend([
                "PM-KISAN",
                "KALIA Scheme (Odisha)",
                "YSR Rythu Bharosa (Andhra Pradesh)",
                "Mukhya Mantri Krishi Ashirwad (Jharkhand)"
            ])
        elif holding == "1-5":
            schemes.extend([
                "NABARD Subsidized Loans",
                "Solar Pump Subsidy",
                "Crop Insurance Scheme (PMFBY)",
                "Fasal Bima Yojana"
            ])
        elif holding == ">5":
            schemes.extend([
                "NABARD Long-Term Projects",
                "Warehouse Construction Loans",
                "Tractor Subsidy Scheme"
            ])

        # Remove duplicates
        schemes = list(set(schemes))

        if schemes:
            st.success("тЬЕ You are eligible for the following schemes:")
            for scheme in schemes:
                st.markdown(f"- {scheme}")
        else:
            st.warning("тЭМ Not eligible for current subsidies based on given inputs.")

    # ------------------ Government Schemes ------------------
    st.subheader("ЁЯУЬ Government Schemes")
    schemes = {
        "PM-KISAN": "тВ╣6000/year in 3 installments",
        "PMFBY": "Crop insurance at low premium",
        "KCC": "Credit up to тВ╣3 lakh @ 4% interest",
        "NABARD": "Irrigation and farm infra support",
        "Mahila Kisan Sashaktikaran": "Skill, input and support for women farmers"
    }
    st.json(schemes)

    # ------------------ Weather Alerts ------------------
    st.header(lang_content["weather_alert"])
    region = st.selectbox("Select Region", ["Punjab", "UP", "MP", "Bihar"])
    weather_data = {
        "Punjab": "ЁЯМзя╕П Light rain expected tomorrow",
        "UP": "тШАя╕П Clear skies today",
        "MP": "тЫИя╕П Thunderstorms likely in evening",
        "Bihar": "ЁЯМжя╕П Cloudy with chances of rain"
    }
    st.warning(weather_data[region])

    # ------------------ Crop Calendar ------------------
    st.header(lang_content["crop_calendar"])
    season = st.selectbox("Choose Season", ["Rabi", "Kharif", "Zaid"])
    calendar_data = {
        "Rabi": "Wheat, Mustard, Barley",
        "Kharif": "Paddy, Maize, Bajra",
        "Zaid": "Watermelon, Cucumber"
    }
    st.success(calendar_data[season])

    # ------------------ Mandi Prices ------------------
    st.subheader("ЁЯТ╕ Mandi Prices")
    mandi_data = {
        "wheat": "тВ╣2200/qtl",
        "rice": "тВ╣1800/qtl",
        "mustard": "тВ╣5500/qtl",
        "maize": "тВ╣1700/qtl",
        "barley": "тВ╣1600/qtl",
        "soybean": "тВ╣4800/qtl",
        "cotton": "тВ╣6600/qtl",
        "groundnut": "тВ╣5500/qtl",
        "sugarcane": "тВ╣340/qtl",
        "potato": "тВ╣1200/qtl",
        "onion": "тВ╣900/qtl",
        "tomato": "тВ╣1100/qtl",
        "bajra": "тВ╣2150/qtl",
        "jowar": "тВ╣2738/qtl",
        "urad dal": "тВ╣6600/qtl",
        "moong dal": "тВ╣7275/qtl",
        "chana": "тВ╣5400/qtl",
        "masoor dal": "тВ╣6000/qtl",
        "banana": "тВ╣1500/qtl",
        "apple": "тВ╣3000/qtl",
        "brinjal": "тВ╣900/qtl",
        "carrot": "тВ╣1100/qtl",
        "cabbage": "тВ╣850/qtl",
        "peas": "тВ╣1400/qtl"
    }
    st.table(mandi_data)

    # ------------------ Task Selection ------------------
    st.subheader("ЁЯУЛ Task for Today")
    tasks = ["Irrigation", "Apply pesticide to paddy", "Harvest tomatoes"]
    task = st.selectbox("Select Task", tasks)
    st.success(f"Your task for today: {task}")

    # ------------------ Footer ------------------
    st.markdown("---")
    st.markdown("Made with тЭдя╕П for Indian Farmers - KrishiMitra")

# Display navigation info if profit dashboard is not available
if not PROFIT_DASHBOARD_AVAILABLE:
    st.sidebar.warning("ЁЯУК Profit Prediction feature unavailable. Please ensure profit_prediction_dashboard.py is in the same directory.")